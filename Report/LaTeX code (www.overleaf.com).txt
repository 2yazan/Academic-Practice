\documentclass{report}
\usepackage[russian]{babel}
\usepackage[utf8]{inputenc}
\usepackage{float}
\usepackage{makecell}
\usepackage{fourier} 
\usepackage{array}
\usepackage{graphicx}
\usepackage{amsmath,amssymb}
\newcommand*\Laplace{\mathop{}\!\mathbin\bigtriangleup}
\newcommand*\DAlambert{\mathop{}\!\mathbin\Box}
\graphicspath{ {./images/} }
\usepackage{minted}
\renewcommand\theadalign{bc}
\renewcommand\theadfont{\bfseries}
\renewcommand\theadgape{\Gape[4pt]}
\renewcommand\cellgape{\Gape[4pt]}

\begin{document}
	\begin{titlepage}
	\begin{center}
		МИНИСТЕРСТВО НАУКИ И ВЫСШЕГО ОБРАЗОВАНИЯ 
		\\
		РОССИЙСКОЙ ФЕДЕРАЦИИ
		\\
		\vspace{0.3cm}
		ФЕДЕРАЛЬНОЕ ГОСУДАРСТВЕННОЕ БЮДЖЕТНОЕ ОБРАЗОВАТЕЛЬНОЕ
		УЧРЕЖДЕНИЕ ВЫСШЕГО ОБРАЗОВАНИЯ\\
		\vspace{0.3cm}
		{\bfseries«БЕЛГОРОДСКИЙ ГОСУДАРСТВЕННЫЙ
			\\ 
			ТЕХНОЛОГИЧЕСКИЙ УНИВЕРСИТЕТ им. В. Г. ШУХОВА»
			\\
			(БГТУ им. В.Г. Шухова)}
		\\
		\vspace{0.3cm}
		Кафедра программного обеспечения вычислительной техники и автоматизированных систем
	\end{center}
	\vspace{3.5em}
	\begin{center}
		{\bfseries«УЧЕБНАЯ ОЗНАКОМИТЕЛЬНАЯ ПРАКТИКА»}
		\\
		\vspace{0.3cm}
		
	\end{center}
	\vspace{2em}
	\begin{center}
		{тема: {КОМПЬЮТЕРНАЯ ПРАКТИКА}}
		
	\end{center}
	
	\vspace{4em}
	\begin{center}
		Автор работы $\underset{\text{}}{\underline{\hspace{0.2\textwidth}}}$ Аладиб Язан ПВ-202
		\vspace{3.5em}
		
		Руководитель работы $\underset{\text{}}{\underline{\hspace{0.2\textwidth}}}$ 	
Гаврющенко Александр Павлович
		
		\vspace{3.5em}
		Оценка \underline{\hspace{0.3\textwidth}}
	\end{center}
	\vspace{\fill}
	\begin{center}
		Белгород 
		\\
		2021 г.
	\end{center}
	\end{titlepage}
\tableofcontents
    \chapter{ТЕМА 1. ЛИНЕЙНЫЕ АЛГОРИТМЫ}
        \section{Задания варианта №2:}
            Угол a задан в радианах. Найти его величину в градусах, минутах и секундах.
        \section{Описание подпрограмм:}
            процедура (rad\_to\_deg):\\
            Спецификация:\\
                1. Заголовок: rad\_to\_deg(double rad)\\
                2. Назначение: перевести из радианов в градусы \\
        \section{Тестовые данные:}
            \begin{table}[!h]
                \centering
                \begin{tabular}{|l|l|}
                    \hline
                    \textbf{Исходные данные} & \textbf{Результаты} \\ 
                    \hline
                    1.5                        & градусы = 85, минут = 56, секунды = 37.209                    \\ 
                    \hline
                    20                        & градусы = 1145, минут = 54, секунды = 56.125                    \\ 
                    \hline
                    13                        & градусы = 744, минут = 50, секунды = 42.481                    \\
                    \hline
                \end{tabular}
            \end{table}
        \newpage
        \section{Текст программы:}{
        \begin{minted}[fontsize=\normal]{c} 
#include <stdio.h>
#include <math.h>

void rad_to_deg(double rad){
    double radians = rad*180/M_PI ;//M_PI = 3.141592
    int degree = radians;
    double r1 = radians-degree;
    int minutes = r1 * 60.0;
    double r2 = r1 - minutes/60.0;
    double seconds = r2*3600.0;
    printf("градусы = %d, минут = %d, секунды = %.3lf"
    ,degree, minutes, seconds);
}
int main() {
    int degree, minutes, seconds;
    double radians;
    printf("введите угол в радианах :\n");
    scanf("%lf", &radians);
    rad_to_deg(radians);
    return 0;
}
        \end{minted}
        \includegraphics[width=150mm]{tema1.png}
        
%the end of the first tema 
%**********************************************************
%**********************************************************
%**********************************************************

%the begin of tema 2 :
    \chapter{ТЕМА 2. РАЗВЕТВЛЯЮЩИЕСЯ АЛГОРИТМЫ}
        \section{Задания варианта №2:}
            Треугольник задан длинами своих сторон:a ,b ,c .Определить, является ли он тупоугольным,прямоугольным или остроугольным.
        \section{Описание подпрограмм:}
            процедура (check):\\
            Спецификация:\\
                1. Заголовок: check(int a,int b,int c)\\
                2. Назначение: проверить, является ли треугольник остроугольным, прямоугольным или тупоугольным \\
        \section{Тестовые данные:}
            \begin{table}[!h]
                \centering
                \begin{tabular}{|l|l|}
                    \hline
                    \textbf{Исходные данные} & \textbf{Результаты} \\ 
                    \hline
                    10\qquad5\qquad2                        & Треугольник является тупоугольным                    \\ 
                    \hline
                    10\qquad7\qquad8                        & Треугольник является остроугольным                    \\ 
                    \hline
                    5\qquad4\qquad3                        & Треугольник является прямоугольным
                    \\
                    \hline
                \end{tabular}
            \end{table}
        \newpage
        \section{Текст программы:}{
        \begin{minted}[fontsize=\normal]{c} 
#include <stdio.h>

void check(int a,int b,int c){
    double A = b * b + c * c - a * a;
    double B = c * c + a * a - b * b;
    double C = a * a + b * b - c * c;
    if (A < 0 || B < 0 || C < 0)
        printf("Треугольник является тупоугольным");
    else if (A == 0 || B == 0 || C == 0)
        printf("Треугольник является прямоугольным");
    else
        printf("Треугольник является остроугольным");
}

int main(){
    int a,b,c;
    printf("введите стороны треугольника :\n");
    scanf("%d %d %d",&a,&b,&c);
    check(a,b,c);
    return 0;
}
        \end{minted}
        \includegraphics[width=150mm]{tema2.png}

%the end of tema 2
%**********************************************************
%**********************************************************
%**********************************************************


%the begin of tema 3 :
    \chapter{ТЕМА 3. ЦИКЛИЧЕСКИЕ И ИТЕРАЦИОННЫЕ АЛГОРИТМЫ}
        \section{Задания варианта №2:}
            Для заданного $\varepsilon$ найти наименьшее n такое, что $\frac{\mathbf{2}^\mathbit{n}}{\mathbit{n}!}<\mathbit{\varepsilon}$. Вывести все члены последовательности от 1-го до n-го. 
        \section{Описание подпрограмм:}
            функция (sequence):\\
            Спецификация:\\
                1. Заголовок: sequence(int n)\\
                2. Назначение: Вычислите и распечатайте последовательность \\
        \section{Тестовые данные:}
            \begin{table}[!h]
                \centering
                \begin{tabular}{|l|l|}
                    \hline
                    \textbf{Исходные данные} & \textbf{Результаты} \\ 
                    \hline
                    $\varepsilon$ = 0.001                        &1) 2\qquad2) 2\qquad3) 1.33333\qquad4) 0.666667\qquad5) 0.266667\qquad6) 0.0888889 \\&7) 0.0253968\qquad8) 0.00634921\qquad9) 0.00141093\qquad10) 0.000282187\qquad n = 10                    \\ 
                    \hline
                    $\varepsilon$ = 1                        &1) 2\qquad2) 2\qquad3) 1.33333\qquad4) 0.666667\qquad n = 4                    \\ 
                    \hline
                    $\varepsilon$ = 0.00001                        &1) 2\qquad2) 2\qquad3) 1.33333\qquad4) 0.666667\qquad5) 0.266667\qquad6) 0.0888889\\&7) 0.0253968\qquad8) 0.00634921\qquad9) 0.00141093\qquad10) 0.000282187\\&11) 5.13067e-05\qquad12) 8.55112e-06\qquad n = 12
                    \\
                    \hline
                \end{tabular}
            \end{table}
        \newpage
        \section{Текст программы:}{
        \begin{minted}[fontsize=\normal]{c} 
#include <stdio.h>
#define E  0.00001

int sequence(int n){
    int i;
    double power = 1.0, fact = 1.0, term;
    for(i = 1; i <= n; i++) {
        power *= 2;
        fact *= i;
    }
    term = power / fact;
    printf("\n%d- %lg", n, term);
    if (term < E)
        return n;
    return sequence(n+1);
}
int main(){
    int min = sequence(1);
    printf("\n");
    printf("n = %d", min);
    return 0;
}

        \end{minted}
        \includegraphics[width=150mm]{tema3.png}
%the end of tema 3
%**********************************************************
%**********************************************************
%**********************************************************


%the begin of tema 4 :
    \chapter{ТЕМА 4. ПРОСТЕЙШИЕ ОПЕРАЦИИ НАД МАССИВАМИ}
        \section{Задания варианта №2:}
            Элементы одномерного массива A($n^2$) построчно расположить в матрице B(n,n). 
        \section{Описание подпрограмм:}
            процедура (input):\\
            Спецификация:\\
                1. Заголовок: input(int array[N*N])\\
                2. Назначение: Ввод массива (аrray) размера N*N (N=3) \\
            \\ \\
            процедура (sort):\\
            Спецификация:\\
                1. Заголовок: sort(int array[N*N],int array2[N][N])\\
                2. Назначение: сортировка элементов одномерного массива (array) построчно в матрице (array2). \\
            \\ \\
            процедура (output):\\
            Спецификация:\\
                1. Заголовок: output(int array2[N][N])\\
                2. Назначение: распечатать матрицу \\
        \section{Тестовые данные:}
            \begin{table}[!h]
                \centering
                \begin{tabular}{|l|l|}
                    \hline
                    \textbf{Исходные данные} & \textbf{Результаты} \\ 
                    \hline
                1\quad2\quad3\quad4\quad5\quad6\quad7\quad8\quad9\quad                        &1\quad2\quad3\\&4\quad5\quad6\\&7\quad8\quad9                 \\ 
                    \hline
                11\quad22\quad33\quad44\quad55\quad66\quad77\quad88\quad99\quad                        &11\quad22\quad33\\&44\quad55\quad66\\&77\quad88\quad99 
                    \\
                    \hline
                \end{tabular}
            \end{table}
        \section{Текст программы:}{
        \begin{minted}[fontsize=\normal]{c} 
#include <stdio.h>
#define N 3

void input(int array[N*N]){
    for(int i=0; i<N*N; i++){
        printf("array[%d] =",i);
        scanf("%d",&array[i]);
    }
}
void sort(int array[N*N],int array2[N][N]){
    for(int i=0; i<N; i++)
        for(int j=0; j<N; j++)
            array2[i][j] = array[i*N+j];
}
void output(int array2[N][N]){
    for(int i=0; i<N; i++){
        for(int j=0; j<N; j++) {
            printf("%d ", array2[i][j]);
        }
        printf("\n");
    }
}
int main(){
    int array[N*N], array2[N][N];
    input(array);
    sort(array,array2);
    output(array2);
    return 0;
}
        \end{minted}
        \includegraphics[width=150mm]{tema4.png}
%the end of tema 4
%**********************************************************
%**********************************************************
%**********************************************************


%the begin of tema 5 :
    \chapter{ТЕМА 5. ВЕКТОРЫ И МАТРИЦЫ}
        \section{Задания варианта №2:}
            Матрицу M(m,n) заполнить натуральными числами от 1 до m.n по спирали, начинающейся в левом верхнем углу и закрученной по часовой стрелке. 
        \section{Описание подпрограмм:}
            процедура (sort):\\
            Спецификация:\\
                1. Заголовок: sort(int m, int n, int M[m][n])\\
                2. Назначение: заполнить и отсортировать матрицу по часовой стрелке \\
            \\ \\
            процедура (output):\\
            Спецификация:\\
                1. Заголовок: output(int m, int n, int M[m][n])\\
                2. Назначение: распечатать матрицу \\
                \newpage
        \section{Тестовые данные:}
            \begin{table}[!h]
                \centering
                \begin{tabular}{|l|l|}
                    \hline
                    \textbf{Исходные данные} & \textbf{Результаты} \\ 
                    \hline
                m = 3\qquad n = 3                        &1\quad2\quad3\\&8\quad9\quad4\\&7\quad6\quad5                 \\ 
                    \hline
                m = 5\qquad n = 3                        &1\quad2\quad3\\&12\quad13\quad4\\&11\quad14\quad5\\&10\quad15\quad6\\&9\quad8\quad7                 \\
                    \hline
                m = 2\qquad n = 5                        &1\quad2\quad3\quad4\quad5\\&10\quad9\quad8\quad7\quad6                 \\ 
                    \hline
                \end{tabular}
            \end{table}
        \section{Текст программы:}{
        \begin{minted}[fontsize=\normal]{c} 
#include <stdio.h>

void sort(int m, int n, int M[m][n]){
    int val = 1;
    int k = 0, l = 0;
    while (k < m && l < n){
        for (int i = l; i < n; ++i)
            M[k][i] = val++;
        k++;
        for (int i = k; i < m; ++i)
            M[i][n-1] = val++;
        n--;
        if (k < m){
            for (int i = n-1; i >= l; --i)
                M[m-1][i] = val++;
            m--;
        }
        if (l < n){
            for (int i = m-1; i >= k; --i)
                M[i][l] = val++;
            l++;
        }
    }
}
void output(int m, int n, int M[m][n]){
    for (int i=0; i<m; i++){
        for (int j=0; j<n; j++) {
            printf("%d ", M[i][j]);
        }
        printf("\n");
    }
}
int main(){
    int m,n;
    printf("введите размер матрицы m * n :\n");
    scanf("%d %d",&m,&n);
    int M[m][n];
    sort(m, n, M);
    output(m,n,M);
    return 0;
}
        \end{minted}
        \includegraphics[width=150mm]{tema5.png}
%the end of tema 5
%**********************************************************
%**********************************************************
%**********************************************************


%the begin of tema 6 :
    \chapter{ТЕМА 6. ЛИНЕЙНЫЙ ПОИСК}
        \section{Задания варианта №2:}
            Седловой точкой в матрице называется элемент, являющийся одновременно наибольшим в столбце и наименьшим в строке. Седловых точек может быть несколько. В матрицеA(m,n) найти все седловые точки либо установить, что таких точек нет. 
        \section{Описание подпрограмм:}
            процедура (input):\\
            Спецификация:\\
                1. Заголовок: input(int m,int n,int A[m][n])\\
                2. Назначение: Ввод массива (A) размера m*n \\
            \\ \\
            процедура (output):\\
            Спецификация:\\
                1. Заголовок: output(int m,int n,int A[m][n])\\
                2. Назначение: распечатать матрицу \\
            \\ \\
            процедура (findsaddlepoints):\\
            Спецификация:\\
                1. Заголовок: findsaddlepoints(int m,int n,int A[m][n])\\
                2. Назначение: нахождение седловых точек в матрице \\
            \newpage
        \section{Тестовые данные:}
            \begin{table}[!h]
                \centering
                \begin{tabular}{| c | c |}
                    \hline
                    \thead{Исходные данные} & \thead{Результаты} \\ 
                    \hline
                \makecell{m = 3\qquad n = 3\\элементы матрицы : 1 2 3 4 5 6 7 8 9 }                    &\makecell{1\quad2\quad3\\4\quad5\quad6\qquad \\7\quad8\quad9 \\\седловая точка:A[3][1]=7}                 \\ 
                    \hline
                \makecell{m = 5\qquad n = 3\\элементы матрицы :\\ 7 8 19 23 53 74 12 32 54 16 31 99 10 17 88}                    &\makecell{7\quad8\quad19\\23\quad53\quad74 \\12\quad32\quad54\\16\quad31\quad99\\10\quad17\quad88 \\Матрица не имеет седловых точек!}
                    \\
                    \hline
                \end{tabular}
            \end{table}
        \section{Текст программы:}{
        \begin{minted}[fontsize=\normal]{c} 
#include <stdio.h>

void input(int m,int n,int A[m][n]){
    for (int i = 0; i < m; ++i) {
        for (int j = 0; j < n; ++j) {
            scanf("%d",&A[i][j]);
        }
    }
}
void output(int m,int n,int A[m][n]){
    for (int i = 0; i < m; ++i) {
        for (int j = 0; j < n; ++j) {
            printf("%d ",A[i][j]);
        }
        printf("\n");
    }
}
void findsaddlepoints(int m,int n,int A[m][n]){
    int min,max,f=0;
    for (int i=0;i<n;i++){
        min=A[i][0];
        for (int x=1;x<m;x++){
            if (A[i][x]<min){
                min=A[i][x];
            }
        }
        for(int j=0;j<n;j++){
            if (A[i][j]==min){
                max=A[0][j];
                for (int y=1;y<n;y++){
                    if (A[y][j]>max){
                        max= A[y][j];
                    }
                }
                if (A[i][j]==max){
                    printf("седловая точка: \n");
                    printf( "A[%d][%d]=%d\n", i+1, j+1, A[i][j] );
                    f=1;
                }
            }
        }
    }
    if(!f)
        printf("Матрица не имеет седловых точек!\n");
}
int main(){
    int m,n;
    printf("введите размер матрицы m*n :\n");
    scanf("%d %d",&m,&n);
    int A[m][n];
    printf("введите элементы матрицы :\n");
    input(m,n,A);
    output(m,n,A);
    findsaddlepoints(m,n,A);
    return 0;
}


        \end{minted}
        \includegraphics[width=150mm]{tema6.png}

%the end of tema 6
%**********************************************************
%**********************************************************
%**********************************************************


%the begin of tema 7 :
    \chapter{ТЕМА 7. АРИФМЕТИКА}
        \section{Задания варианта №2:}
            Для натуральных чисел, не превосходящих заданного k, проверить признак делимости на 9 (сумма цифр числа, делящегося на 9, также делится на 9). Вывести m последних таких чисел (m<<k) . 
        \section{Описание подпрограмм:}
            функция (Sum):\\
            Спецификация:\\
                1. Заголовок: Sum(int n)\\
                2. Назначение: вернуть сумму цифр числа \\
            \\ \\
            функция (divisibility):\\
            Спецификация:\\
                1. Заголовок: divisibility (int value)\\
                2. Назначение: проверить, может ли число делиться на 9\\
            \\ \\
            процедура (output):\\
            Спецификация:\\
                1. Заголовок: output(int k,int m)\\
                2. Назначение: Вывести числа, которые делятся на 9 \\
            \newpage
        \section{Тестовые данные:}
            \begin{table}[!h]
                \centering
                \begin{tabular}{| c | c |}
                    \hline
                    \thead{Исходные данные} & \thead{Результаты} \\ 
                    \hline
                \makecell{k = 100\qquad m = 11}                    &\makecell{числа, которые могут делиться на 9 :\\99\quad90\quad81\qquad72\quad63\quad54\qquad45\quad36\quad27\quad18\quad9}                 \\ 
                    \hline
                \makecell{k = 100\qquad m = 4}                    &\makecell{числа, которые могут делиться на 9 :\\99\quad90\quad81\qquad72}                 \\ 
                    \hline
                \end{tabular}
            \end{table}
        \section{Текст программы:}{
        \begin{minted}[fontsize=\normal]{c} 
#include <stdio.h>

int Sum(int n){
    int sum = 0;
    while (n != 0){
        sum += n % 10;
        n /= 10;
    }
    return sum;
}
int divisibility (int value){
    int digits_sum = Sum(value);
    if (digits_sum % 9 ==0)
        return 1;
    return 0;
}
void output(int k,int m){
    for (int i = k; i > 0 && m > 0; i--) {
        if (1 == divisibility(i)) {
            m = m - 1;
            printf("%d ", i);
        }
    }
}
int main(){
    int k,m;
    printf("введите k :\n");
    scanf("%d", &k);
    printf("введите m :\n");
    scanf("%d", &m);
    printf("числа, которые могут делиться на 9 :\n");
    output(k,m);
    return 0;
}
        \end{minted}
        \includegraphics[width=150mm]{tema7.png}

%the end of tema 7
%**********************************************************
%**********************************************************
%**********************************************************


%the begin of tema 8 :
    \chapter{ТЕМА 8.ГЕОМЕТРИЯ И ТЕОРИЯ МНОЖЕСТВ}
        \section{Задания варианта №2:}
            Задано множество точек на плоскости. Найти выпуклую оболочку этого множества, то есть выпуклый многоугольник с вершинами в некоторых точках этого множества, охватывающий все его точки.
         \section{Описание подпрограмм:}
            функция (ccw):\\
            Спецификация:\\
                1. Заголовок: ccw(const Point *a, const Point *b, const Point *c)\\
                2. Назначение: найти ориентацию упорядоченной тройки \\
            \\ \\
            функция (comparePoints):\\
            Спецификация:\\
                1. Заголовок: comparePoints(const void *lhs, const void *rhs)\\
                2. Назначение: Выводит выпуклую оболочку набора точек.\\
            \\ \\
            процедура (xmalloc):\\
            Спецификация:\\
                1. Заголовок: xmalloc(size\_t n)\\
                2. Назначение: выделение памяти \\
            \\ \\ \\
            процедура (xrealloc):\\
            Спецификация:\\
                1. Заголовок: xrealloc(void* p, size\_t n)\\
                2. Назначение: перераспределение \\
            \\ \\
            процедура (printPoints):\\
            Спецификация:\\
                1. Заголовок: printPoints(const Point* points, int len)\\
                2. Назначение: распечатать точки (результат) \\
            \\ \\
            функция (convexHull):\\
            Спецификация:\\
                1. Заголовок: convexHull(Point p[], int len, int* hsize)\\
                2. Назначение: найти выпуклую оболочку множества точек.\\
        \section{Тестовые данные:}
            \begin{table}[!h]
                \centering
                \begin{tabular}{| c | c |}
                    \hline
                    \thead{Исходные данные} & \thead{Результаты} \\ 
                    \hline
                \makecell{{16,3]}\quad{[12,17]}\quad{[0,6]}
                \quad{[-4,-6]}\quad{[16,6]}\quad{[16,-7]}\quad{[16,-3]}
                \\{[17,-4]}\quad{[5,19]}\quad{[19,-8]}\quad{[3,16]}\quad{[12,13]}\quad{[3,-4]}\\{[17,5]}\quad{[-3,15]}\quad{[-3,-9]}\quad{[0,11]}\quad{[-9,-3]}\quad{[-4,-2]}\quad{[12,10]}}&\makecell{Выпуклая оболочка:\\{[(-9,-3),(-3,-9),(19,-8)\\(17,5),(12,17),(5,19),(-3,15)]}}                \\ 
                    \hline
                \end{tabular}
            \end{table}
        \section{Текст программы:}{
        \begin{minted}[fontsize=\normal]{c} 
#include <stdio.h>
#include <stdlib.h>
#include <assert.h>

typedef struct tPoint{
    int x, y;
} Point;

int ccw(const Point *a, const Point *b, const Point *c){
    return (b->x - a->x) * (c->y - a->y)
           > (b->y - a->y) * (c->x - a->x);
}
int comparePoints(const void *lhs, const void *rhs){
    const Point* lp = lhs;
    const Point* rp = rhs;
    if (lp->x < rp->x)
        return -1;
    if (rp->x < lp->x)
        return 1;
    if (lp->y < rp->y)
        return -1;
    if (rp->y < lp->y)
        return 1;
    return 0;
}
void* xmalloc(size_t n){
    void* ptr = malloc(n);
    return ptr;
}
void* xrealloc(void* p, size_t n){
    void* ptr = realloc(p, n);
    return ptr;
}
void printPoints(const Point* points, int len){
    printf("[");
    if (len > 0) {
        const Point* ptr = points;
        const Point* end = points + len;
        printf("(%d, %d)", ptr->x, ptr->y);
        ++ptr;
        for (; ptr < end; ++ptr)
            printf(", (%d, %d)", ptr->x, ptr->y);
    }
    printf("]");
}
Point* convexHull(Point p[], int len, int* hsize){
    if (len == 0) {
        *hsize = 0;
        return NULL;
    }
    int i, size = 0, capacity = 4;
    Point* hull = xmalloc(capacity * sizeof(Point));
    qsort(p, len, sizeof(Point), comparePoints);
    for (i = 0; i < len; ++i) {
        while (size >= 2 && !ccw(&hull[size - 2], &hull[size - 1], &p[i]))
            --size;
        if (size == capacity) {
            capacity *= 2;
            hull = xrealloc(hull, capacity * sizeof(Point));
        }
        assert(size >= 0 && size < capacity);
        hull[size++] = p[i];
    }
    int t = size + 1;
    for (i = len - 1; i >= 0; i--) {
        while (size >= t && !ccw(&hull[size - 2], &hull[size - 1], &p[i]))
            --size;
        if (size == capacity) {
            capacity *= 2;
            hull = xrealloc(hull, capacity * sizeof(Point));
        }
        assert(size >= 0 && size < capacity);
        hull[size++] = p[i];
    }
    --size;
    assert(size >= 0);
    hull = xrealloc(hull, size * sizeof(Point));
    *hsize = size;
    return hull;
}
int main(){
    Point points[] = {
            {16,  3}, {12, 17}, { 0,  6}, {-4, -6}, {16,  6},
            {16, -7}, {16, -3}, {17, -4}, { 5, 19}, {19, -8},
            { 3, 16}, {12, 13}, { 3, -4}, {17,  5}, {-3, 15},
            {-3, -9}, { 0, 11}, {-9, -3}, {-4, -2}, {12, 10}
    };
    int hsize;
    Point* hull = convexHull(points, sizeof(points)/sizeof(Point), &hsize);
    printf("Выпуклая оболочка: ");
    printPoints(hull, hsize);
    printf("\n");
    free(hull);
    return 0;
}
        \end{minted}
        \includegraphics[width=150mm]{tema8.png}
    

%the end of tema 8
%**********************************************************
%**********************************************************
%**********************************************************


%the begin of tema 9 :
    \chapter{ТЕМА 9. ЛИНЕЙНАЯ АЛГЕБРА И СЖАТИЕ ИНФОРМАЦИИ}
        \section{Задания варианта №2:}
            Выполнить операцию транспонирования прямоугольной матрицы A(m,n), m!=n, не выделяя дополнительногомассива для хранения результата. Матрицу представить в виде одномерного массива. 
        \section{Описание подпрограмм:}
            процедура (input):\\
            Спецификация:\\
                1. Заголовок: input(int m,int n,int **A)\\
                2. Назначение: Ввод массива (A) размера m*n \\
            \\ \\
            процедура (original):\\
            Спецификация:\\
                1. Заголовок: original(int m,int n,int **A)\\
                2. Назначение: распечатать матрицу перед транспозицией\\
            \\ \\
            процедура (transposition):\\
            Спецификация:\\
                1. Заголовок: transposition(int m,int n,int **A)\\
                2. Назначение: распечатать матрицу транспонирования \\
            \newpage
        \section{Тестовые данные:}
            \begin{table}[!h]
                \centering
                \begin{tabular}{| c | c |}
                    \hline
                    \thead{Исходные данные} & \thead{Результаты} \\ 
                    \hline
                \makecell{m = 3\qquad n = 2\\элементы матрицы:\\ 1\quad2\quad3\quad4\quad5\quad6}                    &\makecell{Полученная матрица : \\1\quad2\\3\quad4\\5\quad6\\Результат транспонирования: \\1\quad3\quad5\\2\quad4\quad6}                \\ 
                    \hline
                \makecell{m = 2\qquad n = \\элементы матрицы:\\ 16\quad23\quad65\quad11\quad98\quad34\quad59\quad72}                    &\makecell{Полученная матрица : \\16\quad23\quad65\quad11\\98\quad34\quad59\quad7\\Результат транспонирования: \\16\quad98\\23\quad34\\65\quad59\\11\quad72}                 \\ 
                    \hline
                \end{tabular}
            \end{table}
        \section{Текст программы:}{
        \begin{minted}[fontsize=\normal]{c} 
#include<stdio.h>
#include<stdlib.h>

void input(int m,int n,int **A){
    for(int i=0;i<m;i++) {
        for (int j=0;j<n;j++) {
            printf("A[%d][%d]=", i, j);
            scanf("%d", &A[i][j]);
        }
    }
}
void original(int m,int n,int **A){
    for(int i=0;i<m;i++){
        for(int j=0;j<n;j++){
            printf("%d ",A[i][j]);
        }
        printf("\n");
    }
}
void transposition(int m,int n,int **A){
    for(int i=0;i<n;i++) {
        for (int j=0;j<m;j++) {
            printf("%d ", A[j][i]);
        }
        printf("\n");
    }
}
int main(void){
    int m,n;
    printf("Введите размеры матрицы m*n :\n");
    scanf("%d %d",&m, &n);
    int **A= (int**) malloc(m*sizeof(int*));
    for(int i=0;i<m;i++)
        A[i]=(int*) malloc(n*sizeof(int*));
    printf("введите элементы матрицы :\n");
    input(m,n,A);
    printf("Полученная матрица :\n");
    original(m,n,A);
    printf("Результат транспонирования :\n");
    transposition(m,n,A);
    for(int i=0;i<m;i++)
        free(A[i]);
    free(A);
    return 0;
}
        \end{minted}
        \includegraphics[width=150mm]{tema9.png}
        
%the end of tema 9
%**********************************************************
%**********************************************************
%**********************************************************


%the begin of tema 10 :
\chapter{ТЕМА 10. АЛГОРИТМЫ ОБРАБОТКИ СИМВОЛЬНОЙ ИНФОРМАЦИИ}
        \section{Задания варианта №2:}
            В заданном тексте найти самое длинное слово и самую длинную фразу.
        \section{Описание подпрограмм:}
            процедура (longestPhrase):\\
            Спецификация:\\
                1. Заголовок: longestPhrase(char* text)\\
                2. Назначение: найти самую длинную фразу \\
            \\ \\
            процедура (longestWord):\\
            Спецификация:\\
                1. Заголовок: longestWord(char* text))\\
                2. Назначение: найти самое длинное слово\\
            \\ \\
            \newpage
        \section{Текст программы:}{
        \begin{minted}[fontsize=\normal]{c} 
#include <stdio.h>

void longestPhrase(char* text) {
    int max = 0;
    char Punctuation[] = ".,-?:_;!";
    char *first = text, *last, *firstMax = text, *lastMax;
    for( ;*text; text++) {
        for(int i = 0; Punctuation[i]; i++) {
            if (*text == Punctuation[i]) {
                last = text;
                if (last - first > max) {
                    max = last - first;
                    firstMax = first;
                    lastMax = last;
                }
                first = text + 1;
                break;
            }
        }
    }
    printf("самая длинная фраза:\n");
    while(firstMax <= lastMax)
        putchar(*firstMax++);
    putchar('\n');
}
void longestWord(char* text){
     int i, index=0, max=0, count=0, len = strlen(text);
    for (i=0; i<len; i++)
        if (text[i] != ' ')
            count ++;
        else {
            if (count > max) {
                max = count;
                index = i - count;
            }
            count = 0;
        }
    if (count > max) {
        max = count;
        index = i - count;
    }
    max += index;
    printf("Самое длинное слово:\n");
    for (i=index; i<max; i++)
        putchar(text[i]);
}
int main(){
    char text[] = "C  is a general purpose computer programming"
                   "language. It was created in the 1970s by"
                   "Dennis Ritchie, and remains very widely used"
                   "and influential. By design, C's features cleanly"
                   "reflect the capabilities of the targeted CPUs."
                   "It has found lasting use in operating systems,"
                   "device drivers, protocol stacks, though decreasingly"
                   "for application software, and is common in"
                   "computer architectures that range from the largest"
                   "supercomputers to the smallest microcontrollers"
                   "and embedded systems."
                  ;
    longestPhrase(text);
    printf("\n");
    longestWord(text);
    return 0;
}
        \end{minted}
        \includegraphics[width=150mm]{tema10.png}


\chapter{ТЕМА 11. АНАЛИТИЧЕСКАЯ ГЕОМЕТРИЯ}
        \section{Выполнение работы:}
            2: Построить биссектрису I—III координатных углов декартовой системы координат в диапазоне $x\in[-3;3]$  с шагом \Laplace=0,5.\\ \\
            \includegraphics[width=150mm]{tema 11.png}
 
 \chapter{ТЕМА 12. КРИВЫЕ ВТОРОГО ПОРЯДКА НА ПЛОСКОСТИ}
        \section{Выполнение работы:}
            \includegraphics[width=100mm]{12.png}\\
            \includegraphics[width=130mm]{tema 12.png}

\chapter{ТЕМА 13. ГРАФИЧЕСКОЕ РЕШЕНИЕ СИСТЕМ УРАВНЕНИЙ}
        \section{Выполнение работы:}
            \includegraphics[width=100mm]{13.png}\\ \\
            \includegraphics[width=150mm]{tema 13.png}

\chapter{ТЕМА 14. ПЛОСКОСТЬ В ТРЕХМЕРНОМ ПРОСТРАНСТВЕ}
        \section{Выполнение работы:}
            \includegraphics[width=140mm]{15.png}\\ \\
            \includegraphics[width=150mm]{tema 14.png}
            
\chapter{ТЕМА 15. ПОВЕРХНСТЬ ВТОРОГО ПОРЯДКА В ТРЕХ МЕРНОМ ПРОСТРАНСТВЕ}
        \section{Выполнение работы:}
            \includegraphics[width=100mm]{15 (1).png}\\ \\
            \includegraphics[width=150mm]{tema 15.png}
\end{document}
